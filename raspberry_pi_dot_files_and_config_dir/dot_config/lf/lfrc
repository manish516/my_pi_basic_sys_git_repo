# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10


# execute current file (must be executable)
#map x $$f
#map X !$f

# dedicated keys for file opener actions
#map o &mimeopen $f
#map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
    
    # case $f in
    #     *.pdf) open $f &;;
    # esac

	case $f in
        *.json) vim $fx;;
    esac

    # case $f in
    #     *.jpg|*.png|*.PNG|*.jpeg) open $f &;;
    # esac

    case $f in
        *.m4a|*.mp3|*.webm|*.flac) mpv $fx;
    esac

    # case $f in
    #    *.mp4|*.avi|*.mkv|*.ts|*.mov|*.flv|*.FLV|*.MKV|*.MP4|*.m4b|*.m4v|*.weba) mpv --no-terminal $fx 2> /dev/null &;;
    # esac


}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


#-----code to run fuzzy find in lf_file_manger, so that after quiting the lf folder change 

cmd fzf_jump ${{
    res="$(find . -maxdepth 1000 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

##-----------------------------

#---------Bulk rename multiple files--------------------
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename -a $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}
map br :bulk-rename
##-----------------------------

#---------------------------
map sh :!bash
# map sj :!java $fx
# use enter for shell commands
map <enter> shell
#
map g/ cd /
map gh cd ~
# map gv cd /Volumes/
#map ge cd /etc
#map gu cd /usr
map gd cd ~/Desktop
map gD cd /Volumes/mac_ssd/Downloads
map gx $open . &
#map gl cd -r .
#map gL cd -r %f
#map gv cd /var
#map gm cd /media
map <backspace2> delete
map <delete> delete

map bd push %mkdir<space>
map bf push %touch<space>
#map br :bulk-rename  # already mentioned in above
##---------------------------


#------below keybinding already exit above, these are just for referance----------

##use '<delete>' key for either 'trash' or 'delete' command
##map <delete> trash
##map = push :del  #--script file exist in---/Volumes/mac/11_script_file_del/del.sh-
##map r push :rename<space>
##map . push :play
##map <c-f> :fzf_jump
##---map <c-r> reload/refresh
##---------------------------



#---select files through lf which you want to delete, these files name append to a sh_script, which you can excute to delete all the selected files at once ----------------
# map g0 $rm /Users/mp/Desktop/del/del.sh 
# map g1 cd /Users/mp/Desktop/del/
# map g6 $printf "rm "$fx"\n" | cat >> /Users/mp/Desktop/del/del.sh
##---------------------------

set mouse
map <m-up>    up
map <m-down>  down
